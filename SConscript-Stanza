import shlex, subprocess
from collections import Iterable, namedtuple
import re
import os
import warnings

Import('env')

if 'STANZA_CONFIG' in os.environ:
  stanza_config_dir = os.environ['STANZA_CONFIG']
else:
  warnings.warn("No STANZA_CONFIG environment variable detected, falling back to homedir")
  stanza_config_dir = os.path.expanduser('~')
stanza_config_file = open(os.path.join(stanza_config_dir, '.stanza'), 'r')

for line in stanza_config_file:
  line_split = line.split('=')
  line_split = [elt.strip() for elt in line_split]
  line_split = [elt.strip('"') for elt in line_split]
  if line_split[0] == 'install-dir':
    assert 'STANZADIR' not in env, "multiple install-dir found in .stanza config"
    env['STANZADIR'] = line_split[1]
assert 'STANZADIR' in env, "no install-dir found in .stanza config"

# Propagate some required environment variables from OS
# TODO: do this in a similar way to other SCons tools
if 'TEMP' not in env['ENV'] and 'TEMP' in os.environ:
  # Required for MinGW builds
  env['ENV']['TEMP'] = os.environ['TEMP']
if 'STANZA_CONFIG' not in env['ENV'] and 'STANZA_CONFIG' in os.environ:
  env['ENV']['STANZA_CONFIG'] = os.environ['STANZA_CONFIG']
if 'HOME' not in env['ENV'] and 'HOME' in os.environ:
  env['ENV']['HOME'] = os.environ['HOME']

##
## Stanza Builder
##
default_stanzac = env.WhereIs('stanza')
assert default_stanzac is not None, "Stanza compiler not found in PATH"
env.SetDefault(STANZAC = default_stanzac)
env.SetDefault(STANZACOM = '$STANZAC $STANZALIBS $SOURCES -o $TARGET -s ${TARGET}_src.s $STANZA_FLAGS')
env.SetDefault(STANZACOMSTR = '$STANZACOM')
env.SetDefault(STANZALIBCOM = '$STANZAC $STANZALIBS $SOURCE -pkg $TARGET_DIR $STANZA_FLAGS')
env.SetDefault(STANZALIBCOMSTR = '$STANZALIBCOM')

env.SetDefault(STANZAFILESUFFIX = '.stanza')

if env['PLATFORM'] == 'win32':
  # Stanza seems to add a .exe suffix onto compiled programs for some reason.
  env.SetDefault(STANZAPROGSUFFIX = '.exe')
else:
  env.SetDefault(STANZAPROGSUFFIX = '')

env.SetDefault(STANZA_FLAGS = [])

StanzaLibType = namedtuple('StanzaLibType', ['Sources'])

env.SetDefault(STANZA_LIBS = [])

# Flatten any nested list into a single-dimensional list.
def flatten(lst):
  for x in lst:
    if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):
      for i in flatten(x):
        yield i
    else:
      yield x

# Helper function to flatten any possible nested lists in env['STANZAC'].
def flatten_stanzac(env):
  flat = list(flatten([env['STANZAC']]))
  assert len(flat) == 1, "Cannot have multiple entities as stanza compiler"
  return(flat)

# Read the given filename and return the stanza package name, or returns None.
# e.g. 'foo/bar/baz'
def stanza_package_name(filename):
  try:
    f = open(filename, 'r')
  except IOError:
    return None
  contents = f.read()
  m = re.search('defpackage ([a-zA-Z\d\-/]+) :', contents)
  if m is None:
    return None
  return m.group(1)

# Read the given stanza package name and transform it to a file name.
# e.g. 'foo/bar/baz' -> 'foo$bar$baz.pkg'
# Returns '$$' since SCons will expand variable names otherwise.
def stanza_package_to_filename(package_name):
  return package_name.replace('/', '$$') + '.pkg'

# Compiles a Stanza library
_stanza_lib_builder = Builder(
  action=[
    ['mkdir', '-p', '$TARGET_DIR'],
    Action('$STANZALIBCOM', '$STANZALIBCOMSTR'),
    # Purge the temporary default*.pkg files.
    # Delete(Glob('${TARGET_DIR}/default*.pkg')) doesn't work here...
    # It just results in Delete([]) for some reason.
    ['sh', '-c', 'rm -f ${TARGET_DIR}/default*.pkg']
  ]
)

# Build a single stanza library (.pkg) with the given dependent libs.
# target_dir - target directory in which to put the package (Stanza enforces a
#              particular .pkg filename like Java .class)
# source - the .stanza source file
# libs - list of dependent library .pkg files
def StanzaLibSingle(env, target_dir, source, libs=[], stanzac=None):
  assert not isinstance(source, list)
  assert isinstance(libs, list)

  source = File(source)
  raw_target_dir = target_dir
  target_dir = Dir(target_dir)

  package_name = stanza_package_name(source.srcnode().abspath)
  assert package_name is not None

  target = os.path.join(raw_target_dir, stanza_package_to_filename(package_name))

  # Add some stuff to the environment.
  if stanzac is not None:
    env = env.Clone(
      STANZAC=stanzac,
    )
  env = env.Clone(
    STANZALIBS=libs,
    TARGET_DIR=target_dir,
  )

  target_ = target
  # Calling this early makes sure the stanzac dependency is named correctly
  # for example, if a program suffix is needed
  target = _stanza_lib_builder.__call__(env, target, source)
  assert len(target) == 1
  target = target[0] # only one target here

  # Add all the dependencies of the node.
  # Add here to add to the node, not the string target.
  for lib in libs:
    Depends(target, lib)
  Depends(target, flatten_stanzac(env))

  return target

env.AddMethod(StanzaLibSingle)

# Build one or more stanza libraries (.pkg) with the given dependent libs.
# target_dir - target directory in which to put the package (Stanza enforces a
#              particular .pkg filename like Java .class)
# sources - list of source files. One library will be generated per source
# libs - list of dependent library .pkg files
def StanzaLib(env, target_dir, sources, libs=[], stanzac=None):
  assert isinstance(sources, list)
  assert isinstance(libs, list)

  if len(sources) == 0:
    return None

  result = []
  for source in sources:
    result.append(env.StanzaLibSingle(target_dir, source, libs, stanzac))
  return result

env.AddMethod(StanzaLib)

# Compiles a Stanza program
_stanza_program_builder = Builder(
  action=Action('$STANZACOM', '$STANZACOMSTR'),
  src_suffix='$STANZAFILESUFFIX',
  suffix='$STANZAPROGSUFFIX')

def Stanza(env, target, source, libs, stanzac=None):
  if stanzac is not None:
    env = env.Clone(
      STANZAC=stanzac,
    )

  env = env.Clone(
    STANZALIBS=libs,
  )

  # Calling this early makes sure the stanzac dependency is named correctly
  # for example, if a program suffix is needed
  target = _stanza_program_builder.__call__(env, target, source)

  # Add dependencies to target Node.
  for lib in libs:
    Depends(target, lib)
  Depends(target, flatten_stanzac(env))

  return target

env.AddMethod(Stanza)

##
## Stanza Compiler Builder
##
stanza_compiler_main = "compiler/stz-main.stanza"
env.SetDefault(STANZA_COMPILER_MAIN = File(os.path.join(env['STANZADIR'], stanza_compiler_main)))

"""Builds a Stanza compiler with additional sources for macros.
An intermediate target (the compiler binary) is generated, and the final out
is just that wrapped in a script generated by Stanza's installer.
"""
def StanzaCompiler(env, target, source, libs):
  env = env.Clone()
  env.Append(STANZA_FLAGS = '-optimize')
  source = source + [env['STANZA_COMPILER_MAIN']]
  return env.Stanza(target, source, libs)

env.AddMethod(StanzaCompiler)
